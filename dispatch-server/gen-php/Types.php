<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class ServiceInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ServiceId = null;
  /**
   * @var string
   */
  public $Version = null;
  /**
   * @var string
   */
  public $ServiceName = null;
  /**
   * @var string
   */
  public $HostName = null;
  /**
   * @var int
   */
  public $ListeningPort = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ServiceId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'Version',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ServiceName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'HostName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ListeningPort',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ServiceId'])) {
        $this->ServiceId = $vals['ServiceId'];
      }
      if (isset($vals['Version'])) {
        $this->Version = $vals['Version'];
      }
      if (isset($vals['ServiceName'])) {
        $this->ServiceName = $vals['ServiceName'];
      }
      if (isset($vals['HostName'])) {
        $this->HostName = $vals['HostName'];
      }
      if (isset($vals['ListeningPort'])) {
        $this->ListeningPort = $vals['ListeningPort'];
      }
    }
  }

  public function getName() {
    return 'ServiceInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ServiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ServiceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HostName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ListeningPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceInfo');
    if ($this->ServiceId !== null) {
      $xfer += $output->writeFieldBegin('ServiceId', TType::I32, 1);
      $xfer += $output->writeI32($this->ServiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Version !== null) {
      $xfer += $output->writeFieldBegin('Version', TType::STRING, 2);
      $xfer += $output->writeString($this->Version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ServiceName !== null) {
      $xfer += $output->writeFieldBegin('ServiceName', TType::STRING, 3);
      $xfer += $output->writeString($this->ServiceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HostName !== null) {
      $xfer += $output->writeFieldBegin('HostName', TType::STRING, 4);
      $xfer += $output->writeString($this->HostName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ListeningPort !== null) {
      $xfer += $output->writeFieldBegin('ListeningPort', TType::I32, 5);
      $xfer += $output->writeI32($this->ListeningPort);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
 */
class TimedOutException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'TimedOutException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TimedOutException');
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 1);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * invalid Request
 */
class RequestException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['why'])) {
        $this->why = $vals['why'];
      }
    }
  }

  public function getName() {
    return 'RequestException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->why);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RequestException');
    if ($this->why !== null) {
      $xfer += $output->writeFieldBegin('why', TType::STRING, 1);
      $xfer += $output->writeString($this->why);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

$GLOBALS['Base_CONSTANTS']['SERVICE_VERSION'] = "0.0.1";


